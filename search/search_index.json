{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Chenghao 's Project Site \u00b6 Research Studies \u00b6 Fast Food Study Egg Study Ghana Study Alzheimer Study Fasting Study Github Projects \u00b6 Metabase R package for storing, handling, anlyzing, and visualizing high though-put experiment data, such as metabolomics and proteomics. ShinyMetabase A shiny app wrapped in an R package for metabolomics data analysis, including data normalization, linear model, multivariable analysis and network analysis. phylox R package for storing, handling, analyzing and visualizing phylogenic sequencing data in different phylogenic levels. zheatmap R package for generating clustered and annotated heatmaps using ggplot2 package. ggmetaplots R package with encapsulated functions to generate different plots that is frequently used, such as boxplot and scatterplot. Softwares/Apps \u00b6 ShinyMetabase This is more a show case for the ShinyMetabase. My server is not powerful enough to handle large dataset. Install the package and run on your local machine is recommended for now. diet-tracker This app has two parts. A user's interface to record daily diet intake, and an admin's dashboard to manage all users and see all of their records. Mix Modeler An app allows you to copy paste your data from Excel and run linear model. Power Calculator An app to run power calculator with given means and SDs of two groups. About me \u00b6","title":"Home"},{"location":"#chenghaos-project-site","text":"","title":"Chenghao's Project Site"},{"location":"#research-studies","text":"Fast Food Study Egg Study Ghana Study Alzheimer Study Fasting Study","title":" Research Studies"},{"location":"#github-projects","text":"Metabase R package for storing, handling, anlyzing, and visualizing high though-put experiment data, such as metabolomics and proteomics. ShinyMetabase A shiny app wrapped in an R package for metabolomics data analysis, including data normalization, linear model, multivariable analysis and network analysis. phylox R package for storing, handling, analyzing and visualizing phylogenic sequencing data in different phylogenic levels. zheatmap R package for generating clustered and annotated heatmaps using ggplot2 package. ggmetaplots R package with encapsulated functions to generate different plots that is frequently used, such as boxplot and scatterplot.","title":"  Github Projects"},{"location":"#softwaresapps","text":"ShinyMetabase This is more a show case for the ShinyMetabase. My server is not powerful enough to handle large dataset. Install the package and run on your local machine is recommended for now. diet-tracker This app has two parts. A user's interface to record daily diet intake, and an admin's dashboard to manage all users and see all of their records. Mix Modeler An app allows you to copy paste your data from Excel and run linear model. Power Calculator An app to run power calculator with given means and SDs of two groups.","title":" Softwares/Apps"},{"location":"#about-me","text":"","title":" About me"},{"location":"docs/","text":"Vignettes Introduction to Metabase Metabase: importing data from wcmc report phylox: basic usage zheatmap: basic usage","title":"Documentations"},{"location":"moocs/","text":"Taking online courses is an extremely good way to learn coding, algorithm, or other computation skills for me. Here I listed some good courses that I took. Tip Coursera's courses aren't cheap. If you buy one course at a time, it's usually $79 per course. If you subscript a specialization (which is a series of courses) it's $49 per month. However, if you don't have any credit cards bonded to the website yet(or register a new account if you already did), you can audit without paying anything. You can't take quizzes, submit any projects, or get any certificate. But if you just want to learn the material, it might be a good choice. Data Science Specialization \u00b6 @coursera, by JHU This is a very thorough and well-structured series courses with 10 courses about statistics and R, hosted by the department od Biostatistics in John Hopkins University. It stats with the very basic R programming, then into statistics theoreis (distribution and linear model). It has a very inspiring course called \"reproducible research\" which I think is extremely necessary for us when handling with big datasets. Same as the one below, this specialization is free to audit, and $49 per month is you enroll it to get certificates. The first week is free, and I finished the 9/10 in only two months. Genomic Data Science \u00b6 @coursera, by JHU This is also a series course with 8 courses, also hosted by JHU. This course is extremely useful especially when you want to work with microbiome data, proteomic data, or any HTS(high through-put sequencing) data. It covers the NGS sequencing theory, and the genomic sequences alignment algorithm (with python), unix system operation (most genomic tools were developed in linux platform, such as the QIIME2), and then data analysis. Bioinformaitcs Specialization \u00b6 @coursera, by UCSD This is an replacement of the course above. It was recommended by many people but I didn't take it. Python for Everybody \u00b6 @coursera, by UMich A wonderful series of courses of python for absolute beginners. The professor is very funny and very easy to understand. It teaches the most fundamental data structure and programming skills of python.","title":"Online Courses"},{"location":"moocs/#data-science-specialization","text":"@coursera, by JHU This is a very thorough and well-structured series courses with 10 courses about statistics and R, hosted by the department od Biostatistics in John Hopkins University. It stats with the very basic R programming, then into statistics theoreis (distribution and linear model). It has a very inspiring course called \"reproducible research\" which I think is extremely necessary for us when handling with big datasets. Same as the one below, this specialization is free to audit, and $49 per month is you enroll it to get certificates. The first week is free, and I finished the 9/10 in only two months.","title":"Data Science Specialization"},{"location":"moocs/#genomic-data-science","text":"@coursera, by JHU This is also a series course with 8 courses, also hosted by JHU. This course is extremely useful especially when you want to work with microbiome data, proteomic data, or any HTS(high through-put sequencing) data. It covers the NGS sequencing theory, and the genomic sequences alignment algorithm (with python), unix system operation (most genomic tools were developed in linux platform, such as the QIIME2), and then data analysis.","title":"Genomic Data Science"},{"location":"moocs/#bioinformaitcs-specialization","text":"@coursera, by UCSD This is an replacement of the course above. It was recommended by many people but I didn't take it.","title":"Bioinformaitcs Specialization"},{"location":"moocs/#python-for-everybody","text":"@coursera, by UMich A wonderful series of courses of python for absolute beginners. The professor is very funny and very easy to understand. It teaches the most fundamental data structure and programming skills of python.","title":"Python for Everybody"},{"location":"presents/","text":"Introduction to High Throughput Experiment Data Analysis \u00b6 [ github repo ] [ view slides ] Presentated at the Zivkovic Lab meeting (07/25/2018) The Art of Data Analysis \u00b6 [ github repo ] [ view slides ] Presentated at the Zivkovic Lab meeting (09/25/2018)","title":"Presentations"},{"location":"presents/#introduction-to-high-throughput-experiment-data-analysis","text":"[ github repo ] [ view slides ] Presentated at the Zivkovic Lab meeting (07/25/2018)","title":" Introduction to High Throughput Experiment Data Analysis"},{"location":"presents/#the-art-of-data-analysis","text":"[ github repo ] [ view slides ] Presentated at the Zivkovic Lab meeting (09/25/2018)","title":" The Art of Data Analysis"},{"location":"tutorials/","text":"QIIME2 \u00b6 Qiime2 is actively under developing, with new version released every other month. By the time that I wrote this, qiime2's DADA2 function is much slower (plus there is some problem that we haven't solved of using qiime2's dada2). However, qiime2 is embedded with the fasttree tool. So if you want to use it to build a phylogenic tree, please read the tutorial in qiime2 website, and make sure to use the latest version. DADA2 Tutorial \u00b6 The original dada2 is a R package available on bioconductor. PICRUSt Tutorial with de novo Variants \u00b6 This tutorial allows you to use dada2 output to do function prediction with PICRUSt. Phyloseq \u00b6 Phyloseq is a package that dedicated for microbiome data analysis. It can calculate the alpha diversity, and beta diversity with different methods (unifrac, bray curtis, etc.). But it does not have a phylogenic tree building method which is required by the unifrac method. So you will need to use the qiime2 before phyloseq. The phyloseq's plotting functions are very capsulized, and not very flexible.","title":"Tutorials"},{"location":"tutorials/#qiime2","text":"Qiime2 is actively under developing, with new version released every other month. By the time that I wrote this, qiime2's DADA2 function is much slower (plus there is some problem that we haven't solved of using qiime2's dada2). However, qiime2 is embedded with the fasttree tool. So if you want to use it to build a phylogenic tree, please read the tutorial in qiime2 website, and make sure to use the latest version.","title":"QIIME2"},{"location":"tutorials/#dada2-tutorial","text":"The original dada2 is a R package available on bioconductor.","title":"DADA2 Tutorial"},{"location":"tutorials/#picrust-tutorial-with-de-novo-variants","text":"This tutorial allows you to use dada2 output to do function prediction with PICRUSt.","title":"PICRUSt Tutorial with de novo Variants"},{"location":"tutorials/#phyloseq","text":"Phyloseq is a package that dedicated for microbiome data analysis. It can calculate the alpha diversity, and beta diversity with different methods (unifrac, bray curtis, etc.). But it does not have a phylogenic tree building method which is required by the unifrac method. So you will need to use the qiime2 before phyloseq. The phyloseq's plotting functions are very capsulized, and not very flexible.","title":"Phyloseq"},{"location":"workflows/","text":"Workflows 16S Amplicon Sequence Data Demultiplex [ html workflow ] [ download .ipynb ] [ download additional tool ] DADA2 workflow [ html workflow ] [ download .Rmd ] [ download the data cleaning script ] PICRUSt [ html workflow ] [ download .ipynb ]","title":"Workflows"},{"location":"posts/cn/","text":"zeallot, \u7528 R \u5b9e\u73b0 python \u7684 multiple assignment [2019-03-23] Python \u6709\u5f88\u591a\u975e\u5e38\u4f18\u79c0\u7684\u5730\u65b9\u3002\u8ba9\u6211\u975e\u5e38\u559c\u6b22\u7684\u4e00\u4e2a\u7279\u70b9\u662f\u5b83\u7684 multiple assignment \u7684\u529f\u80fd\u3002\u5047\u8bbe\u6211\u4eec\u8981\u8d4b\u503c\u7ed9\u4e24\u4e2a\u53d8\u91cf x \u548c y \u3002\u5e38\u89c4\u7684\u65b9\u6cd5\u662f ... match.call, R\u8bed\u8a00\u4e2d\u7684\u4e24\u4e2a\u5751 [2019-03-22] \u6709\u65f6\u5019\u4f1a\u9700\u8981\u5199\u4e00\u4e9b\u76f8\u4e92\u4f9d\u8d56\u7684\u51fd\u6570\u4ee5\u907f\u514d\u4ee3\u7801\u7684\u91cd\u590d\u3002\u6bd4\u5982\u8bf4\u51fd\u6570A\u8c03\u7528\u51fd\u6570B\uff0c\u51fd\u6570B\u8c03\u7528\u51fd\u6570C\u3002\u4f46\u4e0d\u540c\u51fd\u6570\u7684arguments \u4f1a\u4e0d\u4e00\u6837\u3002\u5728\u51fd\u6570A\u4e2d\u6307\u5b9a\u6bcf\u4e00\u4e2a\u51fd\u6570B\u4e2d\u6240\u7528\u5230\u7684\u53c2\u6570\u4f1a\u4e0d\u591f\u7075\u6d3b\u3002\u90a3\u66f4\u52a0\u7075\u6d3b\u7684\u65b9\u5f0f\u662f\u7528 ... ...","title":"blogs"},{"location":"posts/en/","text":"JDK dependency for rJava in MacOS [2019-07-07] rJava is an interface that allows users/developers to use Java from R. And there are a few R packages depends on it. However getting it to work seems to be a well-known pain ... Modularize your shiny app using shiny module and R6 class [2019-03-25] Shiny is an R package developed by the RStudio company that provides a solution for quickly web application development mostly for data science/analysis purpose ... zeallot, multiple assignment in R [2019-03-23] On of many things that I really enjoy when writing python is its multiple assignment functionality. Let's say that we want to assign two variables x and y , the typical way is ... match.call, a double pitfall in R [2019-03-22] Sometimes you write a function A in which you call another function B, but you don't want to specify each single arguments defined by function B. So a solution is to use ... after the last argument in A, using match.call() ...","title":"blogs"},{"location":"posts/cn/2019-03-22/","text":"match.call, R\u8bed\u8a00\u7684\u4e00\u4e2a\u8fde\u73af\u5751 \u00b6 \u6709\u65f6\u5019\u4f1a\u9700\u8981\u5199\u4e00\u4e9b\u76f8\u4e92\u4f9d\u8d56\u7684\u51fd\u6570\u4ee5\u907f\u514d\u4ee3\u7801\u7684\u91cd\u590d\u3002\u6bd4\u5982\u8bf4\u51fd\u6570A\u8c03\u7528\u51fd\u6570B\uff0c\u51fd\u6570B\u8c03\u7528\u51fd\u6570C\u3002\u4f46\u4e0d\u540c\u51fd\u6570\u7684arguments \u4f1a\u4e0d\u4e00\u6837\u3002\u5728\u51fd\u6570A\u4e2d\u6307\u5b9a\u6bcf\u4e00\u4e2a\u51fd\u6570B\u4e2d\u6240\u7528\u5230\u7684\u53c2\u6570\u4f1a\u4e0d\u591f\u7075\u6d3b\u3002\u90a3\u66f4\u52a0\u7075\u6d3b\u7684\u65b9\u5f0f\u662f\u7528 ... \u3002 \u5f53\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868\u7684\u6700\u540e\u6709 ... \u65f6R \u4f1a\u81ea\u52a8\u628a\u4efb\u4f55\u6ca1\u6709\u5339\u914d\u7684\u51fd\u6570\u653e\u8fdb\u53bb\u3002\u90a3\u83b7\u53d6\u8fd9\u4e9b\u53c2\u6570\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u7528 match.call() \u6216\u8005 sys.call() \u3002\u8fd9\u4e24\u8005\u7684\u533a\u522b\u662f\uff0c\u524d\u8005\u8fd4\u56de\u4e00\u4e2anamed list\uff0c\u800c\u540e\u8005\u662f unnamed list\u3002 \u4f46\u548cpython \u91cc\u7684 *args \u548c **kwargs \u7684\u533a\u522b\u5728\u4e8e match.call() \u548c sys.call() \u4f1a\u5339\u914d\u6240\u6709\u7684\u53c2\u6570\u800c\u4e0d\u4ec5\u4ec5\u662f ... \uff08which is not a problem\uff09\u3002\u90a3\u83b7\u53d6\u4e86\u7684\u53c2\u6570\u5c31\u53ef\u4ee5\u4efb\u610f\u5904\u7406\uff0c\u8f6c\u6362\uff0c\u6700\u540e\u7528 do.call() \u4f20\u9012\u5230\u8c03\u7528\u7684\u51fd\u6570\u4e2d\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e0b\u9762\u5b9a\u4e49\u4e86\u4e24\u4e2a\u51fd\u6570\u3002 my_sum \u628a3\u4e2a\u6570\u5b57\u76f8\u52a0, \u800c sqr_sum \u5219\u4f1a\u5148\u628a\u6ca1\u4e00\u4e2a\u6570\u503c\u4e58\u65b9\u518d\u8c03\u7528 my_sum \u76f8\u52a0\u3002 my_sum = function(x, y, z){ return(x + y + z) } sqr_sum = function(...){ args = as.list(match.call())[-1] args = lapply(args, function(x) x^2) do.call(my_sum, args) } sqr_sum(x = 2, y = 3, z = 4) # [1] 29 \u5b8c\u7f8e\u3002\u4f46\u662f\uff0c\u5982\u679c\u5982\u679c sqr_sum \u88ab\u53e6\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\uff0c\u5751\u5c31\u51fa\u73b0\u4e86\u3002 add_sqr_sum \u51fd\u6570\u5148\u7ed9\u6bcf\u4e00\u4e2a\u6570\u52a0\u4e0a\u4e00\u4e2a\u503c\uff0c\u518d\u8c03\u7528 sqr_sum add_sqr_sum = function(x, y, z){ x = x + 5 y = y + 6 z = z + 7 sqr_sum(x = x, y = y, z = z) } add_sqr_sum(2,3,4) # Error in x^2 : non-numeric argument to binary operator \u7528 traceback \u4f1a\u53d1\u73b0\uff0c\u9519\u8bef\u53d1\u751f\u5728 sqr_sum \u91cc\u9762\u3002 sqr_sum \u4f3c\u4e4e\u662f\u63a5\u6536\u5230\u4e86 x \uff0c\u4f46 x \u5e76\u4e0d\u662fnumeric\u3002\u6539\u5199\u4e00\u4e0b sqr_sum \uff0c\u628a\u6211\u4eec\u7528 match.call() \u5339\u914d\u5230\u7684 args \u90fd\u6253\u51fa\u6765\u77a7\u77a7\u3002 sqr_sum = function(...){ args = as.list(match.call())[-1] print(args) # args = lapply(args, function(x) x^2) # do.call(my_sum, args) } add_sqr_sum(2,3,4) # $x # x # # $y # y # # $z # z \u8c8c\u4f3c args \u91cc\u7684\u503c\uff0c\u90fd\u662f\u672a\u88ab eval \u8fc7\u7684 symbol \u800c\u975e numeric \u3002\u90a3\u54b1\u8bd5\u8bd5\u76f4\u63a5\u5728global environment \u91cc\u662f\u7528 sqr_sum \u3002 sqr_sum(2,3,4) # $x # [1] 2 # # $y # [1] 3 # # $z # [1] 4 \u90a3\u5f88\u663e\u7136\u8fd9\u4e00\u6b21 args \u91cc\u7684 element \u90fd\u662f\u6570\u503c\u4e86\u3002\u4f46\u662f\u5982\u679c\u5728global environment \u91cc\uff0c\u5f53\u4f60\u628a\u4e00\u4e2a\u53d8\u91cf\u4f20\u5165\u65f6\uff0c\u540c\u6837\u7684\u95ee\u9898\u4e5f\u4f1a\u53d1\u751f x = 2 sqr_sum(x = x, y = 3, z = 4) # $x # x # # $y # [1] 3 # # $z # [1] 4 \u6240\u4ee5\u95ee\u9898\u5c31\u5728\u4e8e\uff0c match.call() \u8fd9\u4e2a\u51fd\u6570\uff0c\u53ea\u4f1a\u611a\u8822\u5730\u628a\u4f20\u5165\u7684\u53c2\u6570\u7ed9match \u4e0b\u6765\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u4f20\u5165\u7684\u662f numeric \uff0c\u90a3\u5c31\u662f numeric \uff0c\u4f20\u5165\u7684\u662f character \u5c31\u662f character \uff0c\u800c\u5982\u679c\u4f20\u5165\u7684\u662f\u4e00\u4e2a\u53d8\u91cf\u7684\u8bdd\uff0c\u5b83\u53ea\u4f1a\u628a symbol \u4fdd\u7559\uff0c\u800c\u4e0d\u4f1a\u5728**calling environment**\u4e2d\u53bb eval \u3002\u56e0\u6b64\u89e3\u51b3\u65b9\u6848\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u628a\u4efb\u4f55\u7684 symbol \u4eba\u4e3a\u5730 eval \u3002 sqr_sum = function(...){ args = as.list(match.call())[-1] call.envir = parent.frame(1) args = lapply(args, function(arg){ if(is.symbol(arg)){ eval(arg, envir = call.envir) } else { arg } }) args = lapply(args, function(x) x^2) do.call(my_sum, args) } sqr_sum(x = x, y = 3, z = 4) # 29 add_sqr_sum(2,3,4) # 251 \u4e16\u754c\u53c8\u53d8\u5f97\u7f8e\u597d\u4e86\u3002 \u5728\u8fd9\u8fc7\u7a0b\u5f53\u4e2d\u8fd8\u53d1\u73b0 match.call \u53e6\u5916\u7684\u4e00\u4e2a\u5751\u3002\u4ee5\u4e0b\u662f\u6587\u6863\u4e2d\u7684 usage \u3002 # Usage match.call(definition = sys.function(sys.parent()), call = sys.call(sys.parent()), expand.dots = TRUE, envir = parent.frame(2L)) \u6587\u6863\u58f0\u79f0\uff0c definition \u548c call \u90fd\u662f\u4f7f\u7528\u7684\u662f\u4f7f\u7528\u4e86 match.call \u7684\u8fd9\u4e2a\u51fd\u6570\u7684 parent enviroment\u3002 match.call \u6ca1\u6cd5\u76f4\u63a5\u67e5\u770b\u6e90\u4ee3\u7801\uff08\u8c8c\u4f3c\u662f\u4e00\u4e2ainternal function\uff09\u4f46\u662f\u5c1d\u8bd5\u4e00\u756a\u4e4b\u540e\u5c31\u4f1a\u53d1\u73b0\uff0c\u5b9e\u9645\u4e0a definition \u548c call \u90fd\u662f\u4f7f\u7528\u7684\u662f\u8be5\u51fd\u6570\u6240\u5728\u7684 environment \u800c\u975e parent environment\u3002\u56e0\u6b64\u6b63\u786e\u7684default parameter \u5176\u5b9e\u5982\u4e0b\uff1a match.call(definition = sys.function(0), call = sys.call(0), expand.dots = TRUE, envir = parent.frame(2L)) \u4ee5\u4e0a\u4fbf\u662f match.call \u7684\u4e24\u4e2a\u5751\u3002","title":"match.call"},{"location":"posts/cn/2019-03-22/#matchcall-r","text":"\u6709\u65f6\u5019\u4f1a\u9700\u8981\u5199\u4e00\u4e9b\u76f8\u4e92\u4f9d\u8d56\u7684\u51fd\u6570\u4ee5\u907f\u514d\u4ee3\u7801\u7684\u91cd\u590d\u3002\u6bd4\u5982\u8bf4\u51fd\u6570A\u8c03\u7528\u51fd\u6570B\uff0c\u51fd\u6570B\u8c03\u7528\u51fd\u6570C\u3002\u4f46\u4e0d\u540c\u51fd\u6570\u7684arguments \u4f1a\u4e0d\u4e00\u6837\u3002\u5728\u51fd\u6570A\u4e2d\u6307\u5b9a\u6bcf\u4e00\u4e2a\u51fd\u6570B\u4e2d\u6240\u7528\u5230\u7684\u53c2\u6570\u4f1a\u4e0d\u591f\u7075\u6d3b\u3002\u90a3\u66f4\u52a0\u7075\u6d3b\u7684\u65b9\u5f0f\u662f\u7528 ... \u3002 \u5f53\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868\u7684\u6700\u540e\u6709 ... \u65f6R \u4f1a\u81ea\u52a8\u628a\u4efb\u4f55\u6ca1\u6709\u5339\u914d\u7684\u51fd\u6570\u653e\u8fdb\u53bb\u3002\u90a3\u83b7\u53d6\u8fd9\u4e9b\u53c2\u6570\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u7528 match.call() \u6216\u8005 sys.call() \u3002\u8fd9\u4e24\u8005\u7684\u533a\u522b\u662f\uff0c\u524d\u8005\u8fd4\u56de\u4e00\u4e2anamed list\uff0c\u800c\u540e\u8005\u662f unnamed list\u3002 \u4f46\u548cpython \u91cc\u7684 *args \u548c **kwargs \u7684\u533a\u522b\u5728\u4e8e match.call() \u548c sys.call() \u4f1a\u5339\u914d\u6240\u6709\u7684\u53c2\u6570\u800c\u4e0d\u4ec5\u4ec5\u662f ... \uff08which is not a problem\uff09\u3002\u90a3\u83b7\u53d6\u4e86\u7684\u53c2\u6570\u5c31\u53ef\u4ee5\u4efb\u610f\u5904\u7406\uff0c\u8f6c\u6362\uff0c\u6700\u540e\u7528 do.call() \u4f20\u9012\u5230\u8c03\u7528\u7684\u51fd\u6570\u4e2d\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e0b\u9762\u5b9a\u4e49\u4e86\u4e24\u4e2a\u51fd\u6570\u3002 my_sum \u628a3\u4e2a\u6570\u5b57\u76f8\u52a0, \u800c sqr_sum \u5219\u4f1a\u5148\u628a\u6ca1\u4e00\u4e2a\u6570\u503c\u4e58\u65b9\u518d\u8c03\u7528 my_sum \u76f8\u52a0\u3002 my_sum = function(x, y, z){ return(x + y + z) } sqr_sum = function(...){ args = as.list(match.call())[-1] args = lapply(args, function(x) x^2) do.call(my_sum, args) } sqr_sum(x = 2, y = 3, z = 4) # [1] 29 \u5b8c\u7f8e\u3002\u4f46\u662f\uff0c\u5982\u679c\u5982\u679c sqr_sum \u88ab\u53e6\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\uff0c\u5751\u5c31\u51fa\u73b0\u4e86\u3002 add_sqr_sum \u51fd\u6570\u5148\u7ed9\u6bcf\u4e00\u4e2a\u6570\u52a0\u4e0a\u4e00\u4e2a\u503c\uff0c\u518d\u8c03\u7528 sqr_sum add_sqr_sum = function(x, y, z){ x = x + 5 y = y + 6 z = z + 7 sqr_sum(x = x, y = y, z = z) } add_sqr_sum(2,3,4) # Error in x^2 : non-numeric argument to binary operator \u7528 traceback \u4f1a\u53d1\u73b0\uff0c\u9519\u8bef\u53d1\u751f\u5728 sqr_sum \u91cc\u9762\u3002 sqr_sum \u4f3c\u4e4e\u662f\u63a5\u6536\u5230\u4e86 x \uff0c\u4f46 x \u5e76\u4e0d\u662fnumeric\u3002\u6539\u5199\u4e00\u4e0b sqr_sum \uff0c\u628a\u6211\u4eec\u7528 match.call() \u5339\u914d\u5230\u7684 args \u90fd\u6253\u51fa\u6765\u77a7\u77a7\u3002 sqr_sum = function(...){ args = as.list(match.call())[-1] print(args) # args = lapply(args, function(x) x^2) # do.call(my_sum, args) } add_sqr_sum(2,3,4) # $x # x # # $y # y # # $z # z \u8c8c\u4f3c args \u91cc\u7684\u503c\uff0c\u90fd\u662f\u672a\u88ab eval \u8fc7\u7684 symbol \u800c\u975e numeric \u3002\u90a3\u54b1\u8bd5\u8bd5\u76f4\u63a5\u5728global environment \u91cc\u662f\u7528 sqr_sum \u3002 sqr_sum(2,3,4) # $x # [1] 2 # # $y # [1] 3 # # $z # [1] 4 \u90a3\u5f88\u663e\u7136\u8fd9\u4e00\u6b21 args \u91cc\u7684 element \u90fd\u662f\u6570\u503c\u4e86\u3002\u4f46\u662f\u5982\u679c\u5728global environment \u91cc\uff0c\u5f53\u4f60\u628a\u4e00\u4e2a\u53d8\u91cf\u4f20\u5165\u65f6\uff0c\u540c\u6837\u7684\u95ee\u9898\u4e5f\u4f1a\u53d1\u751f x = 2 sqr_sum(x = x, y = 3, z = 4) # $x # x # # $y # [1] 3 # # $z # [1] 4 \u6240\u4ee5\u95ee\u9898\u5c31\u5728\u4e8e\uff0c match.call() \u8fd9\u4e2a\u51fd\u6570\uff0c\u53ea\u4f1a\u611a\u8822\u5730\u628a\u4f20\u5165\u7684\u53c2\u6570\u7ed9match \u4e0b\u6765\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u4f20\u5165\u7684\u662f numeric \uff0c\u90a3\u5c31\u662f numeric \uff0c\u4f20\u5165\u7684\u662f character \u5c31\u662f character \uff0c\u800c\u5982\u679c\u4f20\u5165\u7684\u662f\u4e00\u4e2a\u53d8\u91cf\u7684\u8bdd\uff0c\u5b83\u53ea\u4f1a\u628a symbol \u4fdd\u7559\uff0c\u800c\u4e0d\u4f1a\u5728**calling environment**\u4e2d\u53bb eval \u3002\u56e0\u6b64\u89e3\u51b3\u65b9\u6848\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u628a\u4efb\u4f55\u7684 symbol \u4eba\u4e3a\u5730 eval \u3002 sqr_sum = function(...){ args = as.list(match.call())[-1] call.envir = parent.frame(1) args = lapply(args, function(arg){ if(is.symbol(arg)){ eval(arg, envir = call.envir) } else { arg } }) args = lapply(args, function(x) x^2) do.call(my_sum, args) } sqr_sum(x = x, y = 3, z = 4) # 29 add_sqr_sum(2,3,4) # 251 \u4e16\u754c\u53c8\u53d8\u5f97\u7f8e\u597d\u4e86\u3002 \u5728\u8fd9\u8fc7\u7a0b\u5f53\u4e2d\u8fd8\u53d1\u73b0 match.call \u53e6\u5916\u7684\u4e00\u4e2a\u5751\u3002\u4ee5\u4e0b\u662f\u6587\u6863\u4e2d\u7684 usage \u3002 # Usage match.call(definition = sys.function(sys.parent()), call = sys.call(sys.parent()), expand.dots = TRUE, envir = parent.frame(2L)) \u6587\u6863\u58f0\u79f0\uff0c definition \u548c call \u90fd\u662f\u4f7f\u7528\u7684\u662f\u4f7f\u7528\u4e86 match.call \u7684\u8fd9\u4e2a\u51fd\u6570\u7684 parent enviroment\u3002 match.call \u6ca1\u6cd5\u76f4\u63a5\u67e5\u770b\u6e90\u4ee3\u7801\uff08\u8c8c\u4f3c\u662f\u4e00\u4e2ainternal function\uff09\u4f46\u662f\u5c1d\u8bd5\u4e00\u756a\u4e4b\u540e\u5c31\u4f1a\u53d1\u73b0\uff0c\u5b9e\u9645\u4e0a definition \u548c call \u90fd\u662f\u4f7f\u7528\u7684\u662f\u8be5\u51fd\u6570\u6240\u5728\u7684 environment \u800c\u975e parent environment\u3002\u56e0\u6b64\u6b63\u786e\u7684default parameter \u5176\u5b9e\u5982\u4e0b\uff1a match.call(definition = sys.function(0), call = sys.call(0), expand.dots = TRUE, envir = parent.frame(2L)) \u4ee5\u4e0a\u4fbf\u662f match.call \u7684\u4e24\u4e2a\u5751\u3002","title":"match.call, R\u8bed\u8a00\u7684\u4e00\u4e2a\u8fde\u73af\u5751"},{"location":"posts/cn/2019-03-23/","text":"zeallot, \u7528 R \u5b9e\u73b0 python \u7684 multiple assignment \u00b6 Multiple assignment in python \u00b6 Python \u6709\u5f88\u591a\u975e\u5e38\u4f18\u79c0\u7684\u5730\u65b9\u3002\u8ba9\u6211\u975e\u5e38\u559c\u6b22\u7684\u4e00\u4e2a\u7279\u70b9\u662f\u5b83\u7684 multiple assignment \u7684\u529f\u80fd\u3002\u5047\u8bbe\u6211\u4eec\u8981\u8d4b\u503c\u7ed9\u4e24\u4e2a\u53d8\u91cf x \u548c y \u3002\u5e38\u89c4\u7684\u65b9\u6cd5\u662f\uff1a x = 1 y = 2 \u5982\u679c \u7528 python \u7684 multiple assignment \u7684\u529f\u80fd\u7684\u8bdd\uff0c\u5c31\u53ea\u7528\u8fd9\u6837\uff1a x, y = 1, 2 x # 1 y # 2 \u4e0d\u4ec5\u5982\u6b64\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4ea4\u6362 x \u548c y \u7684\u503c\u7684\u8bdd\uff0c\u901a\u5e38\u6765\u8bf4\u6211\u4eec\u53ea\u80fd\u5148\u628a\u5176\u4e2d\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u8d4b\u503c\u7ed9\u7b2c\u4e09\u4e2a\u4e2d\u95f4\u53d8\u91cf\u3002 z = x x = y y = z \u800c\u7528 python \u7684\u8bdd\uff0c\u53ea\u9700\u8981\u8fd9\u6837\uff1a x, y = y, x Multiple assignment in R \u00b6 \u90a3\u4e48\uff0c\u5728 R \u91cc\u6709\u6ca1\u6709\u8fd9\u6837\u7c7b\u4f3c\u7684 multiple assignemtn \u7684\u65b9\u6cd5\u5462\uff1f\u7b54\u6848\u5df2\u7ecf\u5728\u6807\u9898\u91cc\u4e86\uff0c\u5c31\u662f\u7528\u8fd9\u4e2a zeallot package\u3002 zeallot package \u5229\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u64cd\u4f5c\u7b26 %<-% \u6765\u5b8c\u6210 multiple assignment\u3002 library(zeallot) c(x, y) %<-% c(1, 2) x # [1] 1 y # [2] 2 \u540c\u6837\u5982\u679c\u8981\u4ea4\u6362 x \u548c y \u7684\u503c\u7684\u8bdd\uff1a c(x, y) %<-% c(y, x) x # [1] 2 y # [1] 1 %<-% \u5de6\u8fb9\u5fc5\u987b\u662f\u7528 c \u5305\u542b\u7684\u53d8\u91cf\uff0c\u800c\u53f3\u8fb9\u53ef\u4ee5\u662f array \u4e5f\u53ef\u4ee5\u662f list\uff0c\u53ea\u8981\u5de6\u53f3\u4e24\u8fb9\u7684\u957f\u5ea6\u76f8\u7b49\u3002 c(x, y) %<-% list(1, 2) x # [1] 1 y # [1] 2 \u5982\u679c\u53f3\u8fb9\u662f\u4e00\u4e2a data.frame \u7684\u8bdd\uff0c data.frame \u4e2d\u7684\u6bcf\u4e00\u5217\u5219\u4f1a\u88ab\u8d4b\u503c\u7ed9\u5de6\u8fb9\u7684\u53d8\u91cf c(mpg, cyl, disp) %<-% mtcars[1:6, 1:3] mpg # [1] 21.0 21.0 22.8 21.4 18.7 18.1 cyl # [1] 6 6 4 6 8 6 disp # [1] 160 160 108 258 360 225 Construct a data.frame \u00b6 zeallot \u8fd8\u80fd\u7528\u5728\u6784\u5efa data.frame \u591a\u8fc7\u7a0b\u4e2d\u3002 df2 = data.frame( id = 1:6, c(mpg, cyl, disp) %<-% head(mtcars, 6)[,c(\"mpg\", \"cyl\", \"disp\")] ) df2 # id mpg cyl disp # Mazda RX4 1 21.0 6 160 # Mazda RX4 Wag 2 21.0 6 160 # Datsun 710 3 22.8 4 108 # Hornet 4 Drive 4 21.4 6 258 # Hornet Sportabout 5 18.7 8 360 # Valiant 6 18.1 6 225 ggplot2 \u4e5f\u80fd\u7528 \u00b6 \u4f46\u5f97\u6ce8\u610f\uff0c\u53f3\u8fb9\u5fc5\u987b\u5f97\u628a plots \u653e\u5728 list \u5f53\u4e2d\u3002\u7528 c \u663e\u7136\u662f\u4e0d\u884c\u7684.. library(ggplot2) p1 = ggplot(mtcars, aes(factor(cyl), mpg)) + geom_boxplot() p2 = ggplot(mtcars, aes(factor(cyl), hp)) + geom_boxplot() c(p1, p2) %<-% lapply(list(p1, p2), function(p) p + theme_bw() + labs(title = \"Boozaa!\")) p1 p2 Unpacking in for loop \u00b6 Python \u7684 multiple assignment \u5b9e\u9645\u4e0a\u662f\u8fd0\u7528\u4e86 tuple \u6765\u5b9e\u73b0\u7684\u3002\u800c tuple \u8fd8\u53ef\u4ee5\u6709\u66f4\u591a\u7684\u7528\u9014\u3002\u6bd4\u5982\u5728 for loop \u4e2d\u7684 unpacking \u5c24\u5176\u7684\u65b9\u4fbf\uff1a alist = {'a':1, 'b':2, 'c':3} for key, val in alist.items(): print(key) print(val) # x # 1 # y # 2 # z # 3 \u53ef\u60dc\u8fd9\u4e2a\u529f\u80fd\u8fd8\u6ca1\u6709\u5728 R \u6216\u8005 zeallot \u4e2d\u5b9e\u73b0\u3002","title":"zeallot"},{"location":"posts/cn/2019-03-23/#zeallot-r-python-multiple-assignment","text":"","title":"zeallot, \u7528 R \u5b9e\u73b0 python \u7684 multiple assignment"},{"location":"posts/cn/2019-03-23/#multiple-assignment-in-python","text":"Python \u6709\u5f88\u591a\u975e\u5e38\u4f18\u79c0\u7684\u5730\u65b9\u3002\u8ba9\u6211\u975e\u5e38\u559c\u6b22\u7684\u4e00\u4e2a\u7279\u70b9\u662f\u5b83\u7684 multiple assignment \u7684\u529f\u80fd\u3002\u5047\u8bbe\u6211\u4eec\u8981\u8d4b\u503c\u7ed9\u4e24\u4e2a\u53d8\u91cf x \u548c y \u3002\u5e38\u89c4\u7684\u65b9\u6cd5\u662f\uff1a x = 1 y = 2 \u5982\u679c \u7528 python \u7684 multiple assignment \u7684\u529f\u80fd\u7684\u8bdd\uff0c\u5c31\u53ea\u7528\u8fd9\u6837\uff1a x, y = 1, 2 x # 1 y # 2 \u4e0d\u4ec5\u5982\u6b64\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4ea4\u6362 x \u548c y \u7684\u503c\u7684\u8bdd\uff0c\u901a\u5e38\u6765\u8bf4\u6211\u4eec\u53ea\u80fd\u5148\u628a\u5176\u4e2d\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u8d4b\u503c\u7ed9\u7b2c\u4e09\u4e2a\u4e2d\u95f4\u53d8\u91cf\u3002 z = x x = y y = z \u800c\u7528 python \u7684\u8bdd\uff0c\u53ea\u9700\u8981\u8fd9\u6837\uff1a x, y = y, x","title":"Multiple assignment in python"},{"location":"posts/cn/2019-03-23/#multiple-assignment-in-r","text":"\u90a3\u4e48\uff0c\u5728 R \u91cc\u6709\u6ca1\u6709\u8fd9\u6837\u7c7b\u4f3c\u7684 multiple assignemtn \u7684\u65b9\u6cd5\u5462\uff1f\u7b54\u6848\u5df2\u7ecf\u5728\u6807\u9898\u91cc\u4e86\uff0c\u5c31\u662f\u7528\u8fd9\u4e2a zeallot package\u3002 zeallot package \u5229\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u64cd\u4f5c\u7b26 %<-% \u6765\u5b8c\u6210 multiple assignment\u3002 library(zeallot) c(x, y) %<-% c(1, 2) x # [1] 1 y # [2] 2 \u540c\u6837\u5982\u679c\u8981\u4ea4\u6362 x \u548c y \u7684\u503c\u7684\u8bdd\uff1a c(x, y) %<-% c(y, x) x # [1] 2 y # [1] 1 %<-% \u5de6\u8fb9\u5fc5\u987b\u662f\u7528 c \u5305\u542b\u7684\u53d8\u91cf\uff0c\u800c\u53f3\u8fb9\u53ef\u4ee5\u662f array \u4e5f\u53ef\u4ee5\u662f list\uff0c\u53ea\u8981\u5de6\u53f3\u4e24\u8fb9\u7684\u957f\u5ea6\u76f8\u7b49\u3002 c(x, y) %<-% list(1, 2) x # [1] 1 y # [1] 2 \u5982\u679c\u53f3\u8fb9\u662f\u4e00\u4e2a data.frame \u7684\u8bdd\uff0c data.frame \u4e2d\u7684\u6bcf\u4e00\u5217\u5219\u4f1a\u88ab\u8d4b\u503c\u7ed9\u5de6\u8fb9\u7684\u53d8\u91cf c(mpg, cyl, disp) %<-% mtcars[1:6, 1:3] mpg # [1] 21.0 21.0 22.8 21.4 18.7 18.1 cyl # [1] 6 6 4 6 8 6 disp # [1] 160 160 108 258 360 225","title":"Multiple assignment in R"},{"location":"posts/cn/2019-03-23/#construct-a-dataframe","text":"zeallot \u8fd8\u80fd\u7528\u5728\u6784\u5efa data.frame \u591a\u8fc7\u7a0b\u4e2d\u3002 df2 = data.frame( id = 1:6, c(mpg, cyl, disp) %<-% head(mtcars, 6)[,c(\"mpg\", \"cyl\", \"disp\")] ) df2 # id mpg cyl disp # Mazda RX4 1 21.0 6 160 # Mazda RX4 Wag 2 21.0 6 160 # Datsun 710 3 22.8 4 108 # Hornet 4 Drive 4 21.4 6 258 # Hornet Sportabout 5 18.7 8 360 # Valiant 6 18.1 6 225","title":"Construct a data.frame"},{"location":"posts/cn/2019-03-23/#ggplot2","text":"\u4f46\u5f97\u6ce8\u610f\uff0c\u53f3\u8fb9\u5fc5\u987b\u5f97\u628a plots \u653e\u5728 list \u5f53\u4e2d\u3002\u7528 c \u663e\u7136\u662f\u4e0d\u884c\u7684.. library(ggplot2) p1 = ggplot(mtcars, aes(factor(cyl), mpg)) + geom_boxplot() p2 = ggplot(mtcars, aes(factor(cyl), hp)) + geom_boxplot() c(p1, p2) %<-% lapply(list(p1, p2), function(p) p + theme_bw() + labs(title = \"Boozaa!\")) p1 p2","title":"ggplot2 \u4e5f\u80fd\u7528"},{"location":"posts/cn/2019-03-23/#unpacking-in-for-loop","text":"Python \u7684 multiple assignment \u5b9e\u9645\u4e0a\u662f\u8fd0\u7528\u4e86 tuple \u6765\u5b9e\u73b0\u7684\u3002\u800c tuple \u8fd8\u53ef\u4ee5\u6709\u66f4\u591a\u7684\u7528\u9014\u3002\u6bd4\u5982\u5728 for loop \u4e2d\u7684 unpacking \u5c24\u5176\u7684\u65b9\u4fbf\uff1a alist = {'a':1, 'b':2, 'c':3} for key, val in alist.items(): print(key) print(val) # x # 1 # y # 2 # z # 3 \u53ef\u60dc\u8fd9\u4e2a\u529f\u80fd\u8fd8\u6ca1\u6709\u5728 R \u6216\u8005 zeallot \u4e2d\u5b9e\u73b0\u3002","title":"Unpacking in for loop"},{"location":"posts/en/2019-03-22/","text":"match.call, a pitall in R \u00b6 Sometimes you write a function A in which you call another function B, but you don't want to specify each single arguments defined by function B. So a solution is to use ... after the last argument in A, using match.call() or sys.call to get all arguments, process all the arguments, and finally pass all arguments to function B using do.call . Here is a example. We define function my_sum which sum up three numbers together, and a function sqr_sum that square each number then sum them up. my_sum = function(x, y, z){ return(x + y + z) } sqr_sum = function(...){ args = as.list(match.call())[-1] args = lapply(args, function(x) x^2) do.call(my_sum, args) } sqr_sum(x = 2, y = 3, z = 4) # [1] 29 This is perfect, except if we are trying to call the sqr_sum inaother function. The add_sqr_sum function now add a value to each function, and then call the sqr_sum add_sqr_sum = function(x, y, z){ x = x + 5 y = y + 6 z = z + 7 sqr_sum(x = x, y = y, z = z) } add_sqr_sum(2,3,4) # Error in x^2 : non-numeric argument to binary operator If we use the traceback function we'll see the error occurs inside the sqr_sum function. So apparently we have the x , but it's not a numeric. Let's modify the sqr_sum function to print out thr args to see what really is going on. sqr_sum = function(...){ args = as.list(match.call())[-1] print(args) # args = lapply(args, function(x) x^2) # do.call(my_sum, args) } add_sqr_sum(2,3,4) # $x # x # # $y # y # # $z # z So each element of the args list is no longer a numeric value, but a unevaluated symbol . And if we call sqr_sum directly it is fine. sqr_sum(2,3,4) # $x # [1] 2 # # $y # [1] 3 # # $z # [1] 4 But the same problem happens if call sqr_sum directly using a global variable. x = 2 sqr_sum(x = x, y = 3, z = 4) # $x # x # # $y # [1] 3 # # $z # [1] 4 After working on this for hours, I finally found my solution. The solution is actually pretty easy. We just need to eval it if we got a symbol . After I add the new line in the sqr_sum function, it works fine. sqr_sum = function(...){ args = as.list(match.call())[-1] call.envir = parent.frame(1) args = lapply(args, function(arg){ if(is.symbol(arg)){ eval(arg, envir = call.envir) } else { arg } }) args = lapply(args, function(x) x^2) do.call(my_sum, args) } sqr_sum(x = x, y = 3, z = 4) # 29 add_sqr_sum(2,3,4) # 251 While trying to figure this out, I also found another pitfall in the match.call function. # Usage match.call(definition = sys.function(sys.parent()), call = sys.call(sys.parent()), expand.dots = TRUE, envir = parent.frame(2L)) The documentation of match.call says that the definition and call are using the parent environment which is the environment where the function with match.call inside is called. And the envir uses the grand-parent environment. But this is not true. Although this function is a internal function that we can not see the source code, but after I tried some combinations, the default parameter is actually below. match.call(definition = sys.function(0), call = sys.call(0), expand.dots = TRUE, envir = parent.frame(2L))","title":"match.call"},{"location":"posts/en/2019-03-22/#matchcall-a-pitall-in-r","text":"Sometimes you write a function A in which you call another function B, but you don't want to specify each single arguments defined by function B. So a solution is to use ... after the last argument in A, using match.call() or sys.call to get all arguments, process all the arguments, and finally pass all arguments to function B using do.call . Here is a example. We define function my_sum which sum up three numbers together, and a function sqr_sum that square each number then sum them up. my_sum = function(x, y, z){ return(x + y + z) } sqr_sum = function(...){ args = as.list(match.call())[-1] args = lapply(args, function(x) x^2) do.call(my_sum, args) } sqr_sum(x = 2, y = 3, z = 4) # [1] 29 This is perfect, except if we are trying to call the sqr_sum inaother function. The add_sqr_sum function now add a value to each function, and then call the sqr_sum add_sqr_sum = function(x, y, z){ x = x + 5 y = y + 6 z = z + 7 sqr_sum(x = x, y = y, z = z) } add_sqr_sum(2,3,4) # Error in x^2 : non-numeric argument to binary operator If we use the traceback function we'll see the error occurs inside the sqr_sum function. So apparently we have the x , but it's not a numeric. Let's modify the sqr_sum function to print out thr args to see what really is going on. sqr_sum = function(...){ args = as.list(match.call())[-1] print(args) # args = lapply(args, function(x) x^2) # do.call(my_sum, args) } add_sqr_sum(2,3,4) # $x # x # # $y # y # # $z # z So each element of the args list is no longer a numeric value, but a unevaluated symbol . And if we call sqr_sum directly it is fine. sqr_sum(2,3,4) # $x # [1] 2 # # $y # [1] 3 # # $z # [1] 4 But the same problem happens if call sqr_sum directly using a global variable. x = 2 sqr_sum(x = x, y = 3, z = 4) # $x # x # # $y # [1] 3 # # $z # [1] 4 After working on this for hours, I finally found my solution. The solution is actually pretty easy. We just need to eval it if we got a symbol . After I add the new line in the sqr_sum function, it works fine. sqr_sum = function(...){ args = as.list(match.call())[-1] call.envir = parent.frame(1) args = lapply(args, function(arg){ if(is.symbol(arg)){ eval(arg, envir = call.envir) } else { arg } }) args = lapply(args, function(x) x^2) do.call(my_sum, args) } sqr_sum(x = x, y = 3, z = 4) # 29 add_sqr_sum(2,3,4) # 251 While trying to figure this out, I also found another pitfall in the match.call function. # Usage match.call(definition = sys.function(sys.parent()), call = sys.call(sys.parent()), expand.dots = TRUE, envir = parent.frame(2L)) The documentation of match.call says that the definition and call are using the parent environment which is the environment where the function with match.call inside is called. And the envir uses the grand-parent environment. But this is not true. Although this function is a internal function that we can not see the source code, but after I tried some combinations, the default parameter is actually below. match.call(definition = sys.function(0), call = sys.call(0), expand.dots = TRUE, envir = parent.frame(2L))","title":"match.call, a pitall in R"},{"location":"posts/en/2019-03-23/","text":"Zeallot: Multiple assignment in R \u00b6 Multiple assignment in python \u00b6 On of many things that I really enjoy when writing python is its multiple assignment functionality. Let's say that we want to assign two variables x and y , the typical way is : x = 1 y = 2 And with python's multiple assignment, we can do this: x, y = 1, 2 x # 1 y # 2 Even better. If we want to switch the value of x and y, the typical way is creating a third variable first. z = x x = y y = z And with the multiple assignment we can simply do: x, y = y, x Multiple assignment in R \u00b6 So, is there a way to do some thing similar in R? The answer is already in the title of this post. The zeallot package allows you to perform multiple assignment in R, by using the %<-% symbol. library(zeallot) c(x, y) %<-% c(1, 2) x # [1] 1 y # [2] 2 And we can switch the values of x and y using this too. c(x, y) %<-% c(y, x) x # [1] 2 y # [1] 1 The left side of %<-% must be variables wrapped in a c function, while the right side can either be an array or list with the same length as the left side. c(x, y) %<-% list(1, 2) x # [1] 1 y # [1] 2 Unpacking data.frame \u00b6 If the right side is data.frame , the columns will be assigned to the left side. c(mpg, cyl, disp) %<-% mtcars[1:6, 1:3] mpg # [1] 21.0 21.0 22.8 21.4 18.7 18.1 cyl # [1] 6 6 4 6 8 6 disp # [1] 160 160 108 258 360 225 Construct a data.frame \u00b6 zeallot can also be used during the construction of a data.frame. df2 = data.frame( id = 1:6, c(mpg, cyl, disp) %<-% head(mtcars, 6)[,c(\"mpg\", \"cyl\", \"disp\")] ) df2 # id mpg cyl disp # Mazda RX4 1 21.0 6 160 # Mazda RX4 Wag 2 21.0 6 160 # Datsun 710 3 22.8 4 108 # Hornet 4 Drive 4 21.4 6 258 # Hornet Sportabout 5 18.7 8 360 # Valiant 6 18.1 6 225 Works for ggplot, too \u00b6 Yes, it is. But you just have to use list on the right side. Using c seems not gonna work. library(ggplot2) p1 = ggplot(mtcars, aes(factor(cyl), mpg)) + geom_boxplot() p2 = ggplot(mtcars, aes(factor(cyl), hp)) + geom_boxplot() c(p1, p2) %<-% lapply(list(p1, p2), function(p) p + theme_bw() + labs(title = \"Boozaa!\")) p1 p2 Unpacking in for loop \u00b6 The multiple assignment in Python actually uses a special data structure called tuple , which also allows unpacking in a for loop. alist = {'a':1, 'b':2, 'c':3} for key, val in alist.items(): print(key) print(val) # x # 1 # y # 2 # z # 3 But unfortunately this functionality is not implemented in R yet.","title":"zeallot"},{"location":"posts/en/2019-03-23/#zeallot-multiple-assignment-in-r","text":"","title":"Zeallot: Multiple assignment in R"},{"location":"posts/en/2019-03-23/#multiple-assignment-in-python","text":"On of many things that I really enjoy when writing python is its multiple assignment functionality. Let's say that we want to assign two variables x and y , the typical way is : x = 1 y = 2 And with python's multiple assignment, we can do this: x, y = 1, 2 x # 1 y # 2 Even better. If we want to switch the value of x and y, the typical way is creating a third variable first. z = x x = y y = z And with the multiple assignment we can simply do: x, y = y, x","title":"Multiple assignment in python"},{"location":"posts/en/2019-03-23/#multiple-assignment-in-r","text":"So, is there a way to do some thing similar in R? The answer is already in the title of this post. The zeallot package allows you to perform multiple assignment in R, by using the %<-% symbol. library(zeallot) c(x, y) %<-% c(1, 2) x # [1] 1 y # [2] 2 And we can switch the values of x and y using this too. c(x, y) %<-% c(y, x) x # [1] 2 y # [1] 1 The left side of %<-% must be variables wrapped in a c function, while the right side can either be an array or list with the same length as the left side. c(x, y) %<-% list(1, 2) x # [1] 1 y # [1] 2","title":"Multiple assignment in R"},{"location":"posts/en/2019-03-23/#unpacking-dataframe","text":"If the right side is data.frame , the columns will be assigned to the left side. c(mpg, cyl, disp) %<-% mtcars[1:6, 1:3] mpg # [1] 21.0 21.0 22.8 21.4 18.7 18.1 cyl # [1] 6 6 4 6 8 6 disp # [1] 160 160 108 258 360 225","title":"Unpacking data.frame"},{"location":"posts/en/2019-03-23/#construct-a-dataframe","text":"zeallot can also be used during the construction of a data.frame. df2 = data.frame( id = 1:6, c(mpg, cyl, disp) %<-% head(mtcars, 6)[,c(\"mpg\", \"cyl\", \"disp\")] ) df2 # id mpg cyl disp # Mazda RX4 1 21.0 6 160 # Mazda RX4 Wag 2 21.0 6 160 # Datsun 710 3 22.8 4 108 # Hornet 4 Drive 4 21.4 6 258 # Hornet Sportabout 5 18.7 8 360 # Valiant 6 18.1 6 225","title":"Construct a data.frame"},{"location":"posts/en/2019-03-23/#works-for-ggplot-too","text":"Yes, it is. But you just have to use list on the right side. Using c seems not gonna work. library(ggplot2) p1 = ggplot(mtcars, aes(factor(cyl), mpg)) + geom_boxplot() p2 = ggplot(mtcars, aes(factor(cyl), hp)) + geom_boxplot() c(p1, p2) %<-% lapply(list(p1, p2), function(p) p + theme_bw() + labs(title = \"Boozaa!\")) p1 p2","title":"Works for ggplot, too"},{"location":"posts/en/2019-03-23/#unpacking-in-for-loop","text":"The multiple assignment in Python actually uses a special data structure called tuple , which also allows unpacking in a for loop. alist = {'a':1, 'b':2, 'c':3} for key, val in alist.items(): print(key) print(val) # x # 1 # y # 2 # z # 3 But unfortunately this functionality is not implemented in R yet.","title":"Unpacking in for loop"},{"location":"posts/en/2019-03-25/","text":"Modularize your shiny app using shiny module and R6 class \u00b6 Shiny app \u00b6 Shiny is an R package developed by the RStudio company that provides a solution for quick web application development mostly for data science/analysis purpose. Usually not a lot of data scientists have much web knowledge. But when the complexity of your data grows, or when your model has many parameters to tune, being able to visualize on a web app can help you make the decision quickly. Shiny is (sort of) a easy MVC web framework in R, and even some one without any web background can build a simple app very quickly. In shiny, the ui is defined in the ui object, while the server is defined in the server function as below. # in 'app.R' file library(shiny) # define the UI ui = fluidPage( fluidRow( numericInput('x', 'Input x', 0), numericInput('y', 'Input y', 0), \"x + y =\", textOutput('sum', inline = TRUE) ) ) # define the server server = function(input, output, session){ output$sum = renderText({ input$x + input$y }) } shiny::shinyApp(ui, server) Now a problem is, when your app grows, defining everything together makes the project really hard to maintain. Can you imagine to change a component of an app with thousands of lines of codes in a single script? Shiny modules \u00b6 Fortunately, RStudio provided a solution to this, the shiny module . This article on the RStudio website gave a brief yet decent introduction to shiny module (ps. here is another thing I want to complain about shiny. As a web framework, the documentation is just far from sufficient. Only some articles on RStudio website? No.). However, it does not solve the problem of the chaos of the namespace of the app. If you define a function or a variable in a module, this will effect everything else. So, my solution is, the R6 class . R6 class \u00b6 So what is R6 class. R has 4 OOP systems, the S3, S4, RC (reference class), and R6 class. Like RC, R6 is also referenced OOP system. And the grammar is very similar to other languages. The example code below is an example of how to define an R6Class. library(R6) A = R6Class( \"A\", # classname, must (or usually?) be the same as the left hand side of R6Class above public = list( param1 = NULL, # define attributes. You can define as many attributes as you wish param2 = NULL, # I like to initialize the attributes with NULL, but you can absolutely initialize them with certain values initialize = function(param1 = 1, param2 = 2){ self$param1 = param1 self$param2 = param2 }, method1 = function(){ }, method2 = function(){ } ) ) To create an new instance of the defined R6 class A , use A$new() . The default initializer does not take any arguments, however this can be overwritten using the initalize function. So using the example class above, we use A$new(5, 10) . use the self keyword to access the attributes within the class in the class methods. To be noted that, the attributes can also be changed from outside of the class. This is not a problem, but if you would like some of your class attributes to be more secure, you can put them in to the private attributes. To learn more about the R6 class, Handley Wickham has a chapter in his book Advanced R about the R6 class. Modularize your shiny app with R6 class \u00b6 With the help of R6 class, we are now able to really modularize our shiny app and also separate the namespaces by defining attributes and funcitons inside the classes. In the example below,we first defined a InfoBox module that takes in a msg variable, and print it out on the screen. And because it's a R6 class module, it can be reused. R6 class also allows your to define functions in side the class (inside the public list). And the beauty of that is you can be absolutely confident that this particular function will never effect any other modules. # InfoBox.R InfoBox = R6Class( \"InfoBox\", public = list( # attributes id = NULL, # initializer initialize = function(id){ self$id = id }, # UI ui = function(){ # the ns function here will prepend a prefix to all the ids in the app. ns = NS(self$id) tagList( # The id in each UI element must be wrapped in the ns function, in # order to be correctly recognized in the server function inside # the module. textOutput(ns('text')) ) }, # server server = function(input, output, session, msg){ output$text = renderText({ msg }) }, # call call = function(input, ouput, session, msg){ callModule(self$server, self$id, msg) } ) ) # app.R library(shiny); library(R6) # you can use source(\"InfoBox.R\"), however, using import::here makes your code more clear. import::here(InfoBox, .from = \"InfoBox.R\") App = R6Class( \"App\", public = list( # attributes infoBox1 = NULL, infoBox2 = NULL, # initialize initialize = function(){ self$infoBox1 = InfoBox$new(\"box1\") self$infoBox2 = InfoBox$new(\"box2\") }, # UI ui = function(){ fluidPage( self$infoBox1$ui(), tags$hr(), self$infoBox2$ui() ) }, # server server = function(input, output, session){ self$infoBox1$call(msg = \"I am groot\") self$infoBox2$call(msg = \"I am Steve Rogers\") } ) ) app = App$new() shiny::shinyApp(app$ui(), app$server) Structure your shiny app with R6 module \u00b6 Now with the R6 shiny module, we can break the shiny app into pieces, put them into separate R scripts, group them up in folders. An example of a modularized shiny app structure is below. Different developers definitly have different style, but as long as it is modularized and stored in certain structure, it definitly improves the developing experience. my-shiny-app |-- app.R +-- global.R +-- components +-- modules | +-- ShinyModule.R | +-- DataTable.R | +-- InfoBox.R +-- layout | +-- Header.R | +-- Body.R | +-- Sidebar.R +-- pages +-- Page1.R +-- Page2.R +-- Page3.R Conclusion \u00b6 With the R6 shiny module, this is now like a morden web framework such as Vue or Django. You may find it to be a little redundent sometimes, but it makes the maintainance much easier.","title":"shiny-modules"},{"location":"posts/en/2019-03-25/#modularize-your-shiny-app-using-shiny-module-and-r6-class","text":"","title":"Modularize your shiny app using shiny module and R6 class"},{"location":"posts/en/2019-03-25/#shiny-app","text":"Shiny is an R package developed by the RStudio company that provides a solution for quick web application development mostly for data science/analysis purpose. Usually not a lot of data scientists have much web knowledge. But when the complexity of your data grows, or when your model has many parameters to tune, being able to visualize on a web app can help you make the decision quickly. Shiny is (sort of) a easy MVC web framework in R, and even some one without any web background can build a simple app very quickly. In shiny, the ui is defined in the ui object, while the server is defined in the server function as below. # in 'app.R' file library(shiny) # define the UI ui = fluidPage( fluidRow( numericInput('x', 'Input x', 0), numericInput('y', 'Input y', 0), \"x + y =\", textOutput('sum', inline = TRUE) ) ) # define the server server = function(input, output, session){ output$sum = renderText({ input$x + input$y }) } shiny::shinyApp(ui, server) Now a problem is, when your app grows, defining everything together makes the project really hard to maintain. Can you imagine to change a component of an app with thousands of lines of codes in a single script?","title":" Shiny app"},{"location":"posts/en/2019-03-25/#shiny-modules","text":"Fortunately, RStudio provided a solution to this, the shiny module . This article on the RStudio website gave a brief yet decent introduction to shiny module (ps. here is another thing I want to complain about shiny. As a web framework, the documentation is just far from sufficient. Only some articles on RStudio website? No.). However, it does not solve the problem of the chaos of the namespace of the app. If you define a function or a variable in a module, this will effect everything else. So, my solution is, the R6 class .","title":" Shiny modules"},{"location":"posts/en/2019-03-25/#r6-class","text":"So what is R6 class. R has 4 OOP systems, the S3, S4, RC (reference class), and R6 class. Like RC, R6 is also referenced OOP system. And the grammar is very similar to other languages. The example code below is an example of how to define an R6Class. library(R6) A = R6Class( \"A\", # classname, must (or usually?) be the same as the left hand side of R6Class above public = list( param1 = NULL, # define attributes. You can define as many attributes as you wish param2 = NULL, # I like to initialize the attributes with NULL, but you can absolutely initialize them with certain values initialize = function(param1 = 1, param2 = 2){ self$param1 = param1 self$param2 = param2 }, method1 = function(){ }, method2 = function(){ } ) ) To create an new instance of the defined R6 class A , use A$new() . The default initializer does not take any arguments, however this can be overwritten using the initalize function. So using the example class above, we use A$new(5, 10) . use the self keyword to access the attributes within the class in the class methods. To be noted that, the attributes can also be changed from outside of the class. This is not a problem, but if you would like some of your class attributes to be more secure, you can put them in to the private attributes. To learn more about the R6 class, Handley Wickham has a chapter in his book Advanced R about the R6 class.","title":" R6 class"},{"location":"posts/en/2019-03-25/#modularize-your-shiny-app-with-r6-class","text":"With the help of R6 class, we are now able to really modularize our shiny app and also separate the namespaces by defining attributes and funcitons inside the classes. In the example below,we first defined a InfoBox module that takes in a msg variable, and print it out on the screen. And because it's a R6 class module, it can be reused. R6 class also allows your to define functions in side the class (inside the public list). And the beauty of that is you can be absolutely confident that this particular function will never effect any other modules. # InfoBox.R InfoBox = R6Class( \"InfoBox\", public = list( # attributes id = NULL, # initializer initialize = function(id){ self$id = id }, # UI ui = function(){ # the ns function here will prepend a prefix to all the ids in the app. ns = NS(self$id) tagList( # The id in each UI element must be wrapped in the ns function, in # order to be correctly recognized in the server function inside # the module. textOutput(ns('text')) ) }, # server server = function(input, output, session, msg){ output$text = renderText({ msg }) }, # call call = function(input, ouput, session, msg){ callModule(self$server, self$id, msg) } ) ) # app.R library(shiny); library(R6) # you can use source(\"InfoBox.R\"), however, using import::here makes your code more clear. import::here(InfoBox, .from = \"InfoBox.R\") App = R6Class( \"App\", public = list( # attributes infoBox1 = NULL, infoBox2 = NULL, # initialize initialize = function(){ self$infoBox1 = InfoBox$new(\"box1\") self$infoBox2 = InfoBox$new(\"box2\") }, # UI ui = function(){ fluidPage( self$infoBox1$ui(), tags$hr(), self$infoBox2$ui() ) }, # server server = function(input, output, session){ self$infoBox1$call(msg = \"I am groot\") self$infoBox2$call(msg = \"I am Steve Rogers\") } ) ) app = App$new() shiny::shinyApp(app$ui(), app$server)","title":" Modularize your shiny app with R6 class"},{"location":"posts/en/2019-03-25/#structure-your-shiny-app-with-r6-module","text":"Now with the R6 shiny module, we can break the shiny app into pieces, put them into separate R scripts, group them up in folders. An example of a modularized shiny app structure is below. Different developers definitly have different style, but as long as it is modularized and stored in certain structure, it definitly improves the developing experience. my-shiny-app |-- app.R +-- global.R +-- components +-- modules | +-- ShinyModule.R | +-- DataTable.R | +-- InfoBox.R +-- layout | +-- Header.R | +-- Body.R | +-- Sidebar.R +-- pages +-- Page1.R +-- Page2.R +-- Page3.R","title":" Structure your shiny app with R6 module"},{"location":"posts/en/2019-03-25/#conclusion","text":"With the R6 shiny module, this is now like a morden web framework such as Vue or Django. You may find it to be a little redundent sometimes, but it makes the maintainance much easier.","title":" Conclusion"},{"location":"posts/en/2019-06-09/","text":"Soap request with R \u00b6 I am recently working on a project that is involved in converting metabolite/chemical compound IDs between databases/systems. What is SOAP \u00b6","title":"Soap request with R"},{"location":"posts/en/2019-06-09/#soap-request-with-r","text":"I am recently working on a project that is involved in converting metabolite/chemical compound IDs between databases/systems.","title":"Soap request with R"},{"location":"posts/en/2019-06-09/#what-is-soap","text":"","title":" What is SOAP"},{"location":"posts/en/2019-07-07/","text":"JDK dependency for rJava in MacOS \u00b6 rJava is an interface that allows users/developers to use Java from R. And there are a few R packages depend on it. However getting it to work seems to be a well-known pain. The xlsx is a R package that can both read and write xlsx spreadsheet from R and, unsurprisingly, it depends on rJava. I struggled a lot a couple of years ago and somehow got it work successfully on my old MacBook air. Earlier this year, I got a new MacBook pro, and here the problem comes back. Installing the xlsx package from CRAN automatically installs the rJava packages, too, because of the dependency. But when I load the package, it throws me an error. > library(xlsx) Unable to find any JVMs matching version \"(null)\". No Java runtime present, try --request to install. Error: package or namespace load failed for \u2018xlsx\u2019: .onLoad failed in loadNamespace() for 'rJava', details: call: dyn.load(file, DLLpath = DLLpath, ...) error: unable to load shared object '/Library/Frameworks/R.framework/Versions/3.5/Resources/library/rJava/libs/rJava.so': dlopen(/Library/Frameworks/R.framework/Versions/3.5/Resources/library/rJava/libs/rJava.so, 6): Library not loaded: /Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home/lib/server/libjvm.dylib Referenced from: /Library/Frameworks/R.framework/Versions/3.5/Resources/library/rJava/libs/rJava.so Reason: image not found In addition: Warning message: In system(\"/usr/libexec/java_home\", intern = TRUE) : running command '/usr/libexec/java_home' had status 1 The error message says that the xlsx package can't be loaded because there is a problem while loading the rJava. And the reason is that the java library was not found. And if I go to terminal to check my java\" $ java -version No Java runtime present, requesting install. So we need to have the java installed, and according to the error message, it must be 11.0.1. However, the most latest java version on the Oracle website is 12.0.1, and Oracle does not put every historical version on the website. Although 11.0.3 is available, but it's not working! After searching on the internet for a while, I found a github repository that collected all links to the historical version of java, including JDK 11 . However, the links are a little out of date since Oracle changed the directory name that stores their archives. The link below downloads the JDK 11.0.1. https://download.oracle.com/otn/java/jdk/11.0.1+13/90cf5d8f270a4347a95050320eef3fb7/jdk-11.0.1_osx-x64_bin.dmg And if you want to download the zipped file: https://download.oracle.com/otn/java/jdk/11.0.1+13/90cf5d8f270a4347a95050320eef3fb7/jdk-11.0.1_osx-x64_bin.tar.gz Install it after the downloading finishes, and your rJava dependent packages are good to go. However, if you have a newer version of JDK also installed, and if you load any rJava dependent package in RStudio, the IDE will break, because by default, it is going to use the newest JDK installed. So we need to tell the R session to use jdk-11.0.1, using a single line of code below before loading the package: > Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home') Enjoy!","title":"rJava"},{"location":"posts/en/2019-07-07/#jdk-dependency-for-rjava-in-macos","text":"rJava is an interface that allows users/developers to use Java from R. And there are a few R packages depend on it. However getting it to work seems to be a well-known pain. The xlsx is a R package that can both read and write xlsx spreadsheet from R and, unsurprisingly, it depends on rJava. I struggled a lot a couple of years ago and somehow got it work successfully on my old MacBook air. Earlier this year, I got a new MacBook pro, and here the problem comes back. Installing the xlsx package from CRAN automatically installs the rJava packages, too, because of the dependency. But when I load the package, it throws me an error. > library(xlsx) Unable to find any JVMs matching version \"(null)\". No Java runtime present, try --request to install. Error: package or namespace load failed for \u2018xlsx\u2019: .onLoad failed in loadNamespace() for 'rJava', details: call: dyn.load(file, DLLpath = DLLpath, ...) error: unable to load shared object '/Library/Frameworks/R.framework/Versions/3.5/Resources/library/rJava/libs/rJava.so': dlopen(/Library/Frameworks/R.framework/Versions/3.5/Resources/library/rJava/libs/rJava.so, 6): Library not loaded: /Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home/lib/server/libjvm.dylib Referenced from: /Library/Frameworks/R.framework/Versions/3.5/Resources/library/rJava/libs/rJava.so Reason: image not found In addition: Warning message: In system(\"/usr/libexec/java_home\", intern = TRUE) : running command '/usr/libexec/java_home' had status 1 The error message says that the xlsx package can't be loaded because there is a problem while loading the rJava. And the reason is that the java library was not found. And if I go to terminal to check my java\" $ java -version No Java runtime present, requesting install. So we need to have the java installed, and according to the error message, it must be 11.0.1. However, the most latest java version on the Oracle website is 12.0.1, and Oracle does not put every historical version on the website. Although 11.0.3 is available, but it's not working! After searching on the internet for a while, I found a github repository that collected all links to the historical version of java, including JDK 11 . However, the links are a little out of date since Oracle changed the directory name that stores their archives. The link below downloads the JDK 11.0.1. https://download.oracle.com/otn/java/jdk/11.0.1+13/90cf5d8f270a4347a95050320eef3fb7/jdk-11.0.1_osx-x64_bin.dmg And if you want to download the zipped file: https://download.oracle.com/otn/java/jdk/11.0.1+13/90cf5d8f270a4347a95050320eef3fb7/jdk-11.0.1_osx-x64_bin.tar.gz Install it after the downloading finishes, and your rJava dependent packages are good to go. However, if you have a newer version of JDK also installed, and if you load any rJava dependent package in RStudio, the IDE will break, because by default, it is going to use the newest JDK installed. So we need to tell the R session to use jdk-11.0.1, using a single line of code below before loading the package: > Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home') Enjoy!","title":"JDK dependency for rJava in MacOS"},{"location":"study-docs/alzheimer/","text":"Alzheimer HDL Study \u00b6 Shiny Apps \u00b6 15 patients, HDL glycoproteome and cholesterol efflux. [ shiny app ] 48 patients, plasma glycoprotome. [ shiny app ]","title":"Alzheimer HDL Study"},{"location":"study-docs/alzheimer/#alzheimer-hdl-study","text":"","title":"Alzheimer HDL Study"},{"location":"study-docs/alzheimer/#shiny-apps","text":"15 patients, HDL glycoproteome and cholesterol efflux. [ shiny app ] 48 patients, plasma glycoprotome. [ shiny app ]","title":"Shiny Apps"},{"location":"study-docs/fasting/","text":"Fasting Study \u00b6 Shiny App \u00b6","title":"Fasting Study"},{"location":"study-docs/fasting/#fasting-study","text":"","title":"Fasting Study"},{"location":"study-docs/fasting/#shiny-app","text":"","title":" Shiny App"},{"location":"study-docs/ffs/","text":"Fast Food Study \u00b6 HDL Composition and Functions \u00b6 The main shiny app: HDL lipidome, glycoproteome, HDL functions, and clinical values. [ Shiny App ] Microbiome and Metabolome \u00b6 The main shiny app: microbiome, biogenic amines, bile acids, short chain fatty acids, and dietary data. [ Shiny App ] Microbiome, Metabolome vs HDL composition and functions. [ Shiny App ]","title":"Ffs"},{"location":"study-docs/ffs/#fast-food-study","text":"","title":"Fast Food Study"},{"location":"study-docs/ffs/#hdl-composition-and-functions","text":"The main shiny app: HDL lipidome, glycoproteome, HDL functions, and clinical values. [ Shiny App ]","title":"HDL Composition and Functions"},{"location":"study-docs/ffs/#microbiome-and-metabolome","text":"The main shiny app: microbiome, biogenic amines, bile acids, short chain fatty acids, and dietary data. [ Shiny App ] Microbiome, Metabolome vs HDL composition and functions. [ Shiny App ]","title":"Microbiome and Metabolome"},{"location":"study-docs/ghana/","text":"Ghana Study \u00b6 Ghana Baby Study \u00b6 Main App Gllycoproteome Calibration Curve","title":"Ghana Study"},{"location":"study-docs/ghana/#ghana-study","text":"","title":"Ghana Study"},{"location":"study-docs/ghana/#ghana-baby-study","text":"Main App Gllycoproteome Calibration Curve","title":"Ghana Baby Study"}]}